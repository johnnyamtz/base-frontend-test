{"version":3,"sources":["index.js"],"names":["RowData","props","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","data","cnt","id","datetime","type","name","value","value1","onChange","value2","DateCbBx","autoFocus","RestFAPI","_this","Object","C_base_frontend_test_master_solution_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_base_frontend_test_master_solution_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_base_frontend_test_master_solution_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","state","action","stateResult","message","quantity","old","rangeTime","minValY","maxValY","dataGraph","valsY1","valsY2","dates","getDataFromSrvr","sender","target","hours","moment","Moment","parUrl","format","substring","subtract","auxMin","auxMax","forEach","e","y","setState","qtyObjs","_this2","auxRangeT","params","getParametersURL","fetch","then","result","status","statusText","json","response","iCnt","info","key","timestamp","v1","v2","concat","getMaxMin","paintGraph","catch","ex","console","log","_this3","toUpdate","valueArr","request","JSON","stringify","datosX","length","max","Number","min","labelTime","labetValues","Math","round","dataset1","dataset2","dataset","dtaDate","d3","remove","svg","margin","width","attr","height","xData","domain","range","xRange","xScale","yScale","g","append","text","line","x","d","i","curve","selectAll","enter","_this4","qty","handleSelected","map","fila","handleChange","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9387854b.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Moment from 'moment';\r\nimport * as d3 from 'd3';\r\nimport './index.css';\r\n\r\n// Function that draws a table with the values.\r\nfunction RowData(props) {\r\n    return (\r\n      <div className={((props.data.cnt + 2) % 2 === 0) ? 'row1' : 'row2'}>\r\n      <tr id={props.data.id}>\r\n        <td className=\"col1\">{props.data.datetime}</td>\r\n        <td className=\"col2\">\r\n          <input className=\"values\" type=\"number\" name=\"val1\" id={props.data.id} value={props.data.value1} onChange={props.onChange} />\r\n        </td>\r\n        <td className=\"col3\">\r\n          <input className=\"values\" type=\"number\" name=\"val2\" id={props.data.id} value={props.data.value2} onChange={props.onChange} />\r\n        </td>\r\n      </tr>\r\n      </div>\r\n    );\r\n}\r\n\r\n// Function that draws the comboBox.\r\nfunction DateCbBx(props) {\r\n  return (\r\n    <select className=\"time\" name=\"tiempo\" value={props.value} onChange={props.onChange} autoFocus>\r\n    <option value=\"1\">Last hour</option>\r\n    <option value=\"3\">Last 3 hours</option>\r\n    <option value=\"6\">Last 6 hours</option>\r\n    <option value=\"12\">Last 12 hours</option>\r\n    </select>\r\n  );\r\n}\r\n\r\nclass RestFAPI extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // Vars of request.\r\n      action: 'get',\r\n      stateResult: 0,\r\n      message: '',\r\n      // Vars of information about the response.\r\n      quantity: 0,\r\n      old: 1, // 1 is the default value.\r\n      rangeTime: '',\r\n      // Vars of control of data.\r\n        // Limits of the y axis.\r\n      minValY: 0,\r\n      maxValY: 0,\r\n        // Info to show in the table.\r\n      dataGraph: [],\r\n        // Info to show in the graph.\r\n      valsY1: [],\r\n      valsY2: [],\r\n        // Info to show in the x axis on the graph.\r\n      dates: []\r\n    };\r\n   }\r\n\r\n  componentWillMount() {\r\n    // Get the data from the server.\r\n    this.getDataFromSrvr(this.state.old);\r\n  }\r\n\r\n  // Handle the selected item on the comboBox.\r\n  handleSelected(sender) {\r\n    // Get the data from the server.\r\n    this.getDataFromSrvr(sender.target.value);\r\n  }\r\n\r\n  // Function that returns the parameters for the request (start and end datetime).\r\n  getParametersURL(hours) {\r\n    let moment = new Moment();\r\n    let parUrl = '';\r\n    parUrl = \"&end=\" + moment.format().substring(0, 19) + \"&\";\r\n    parUrl = \"start=\" + moment.subtract(hours, 'hours').format().substring(0, 19) + parUrl;\r\n    return parUrl;\r\n  }\r\n\r\n  // Gets the maximum and minimum value of all data.\r\n  getMaxMin() {\r\n    let auxMin = 0, auxMax = 0;\r\n    this.state.valsY1.forEach((e) => {\r\n      auxMin = (auxMin < e.y) ? auxMin : e.y;\r\n      auxMax = (auxMax > e.y) ? auxMax : e.y;\r\n    });\r\n    this.state.valsY2.forEach((e) => {\r\n      auxMin = (auxMin < e.y) ? auxMin : e.y;\r\n      auxMax = (auxMax > e.y) ? auxMax : e.y;\r\n    });\r\n    this.setState({\r\n      minValY: auxMin,\r\n      maxValY: auxMax\r\n    });\r\n  }\r\n\r\n  // Function that gets the data from the server.\r\n  getDataFromSrvr(qtyObjs) {\r\n    this.setState({\r\n      action: 'get',\r\n      stateResult: 0,\r\n      quantity: 0,\r\n      old: qtyObjs,\r\n      rangeTime: '',\r\n      minValY: 0,\r\n      maxValY: 0,\r\n      dataGraph: [],\r\n      valsY1: [],\r\n      valsY2: [],\r\n      dates: []\r\n    });\r\n    let auxRangeT = '';\r\n    let params = 'http://localhost:8080/reading/?' + this.getParametersURL(qtyObjs); // Create the url to make the data request.\r\n    fetch(params)\r\n      .then((result) => {\r\n        this.setState({\r\n          stateResult: result.status,\r\n          message: result.statusText,\r\n          quantity: -1\r\n        });\r\n        return result.json();\r\n      })\r\n      .then((response) => {\r\n        let iCnt = 0;\r\n        response.forEach((data) => {\r\n          // Create an object with the current data.\r\n          let info = {\r\n            cnt: iCnt,\r\n            key: data.id,\r\n            datetime: data.timestamp,\r\n            value1: data.value1,\r\n            value2: data.value2\r\n          }\r\n          if (iCnt === 0) {\r\n            this.setState({\r\n              rangeTime: new Moment(info.datetime).format(\"hh:mm\") + ' - '\r\n            });\r\n          }\r\n          // Create two objects with the values to show in the graph.\r\n          let v1 = { y: info.value1 };\r\n          let v2 = { y: info.value2 };\r\n          this.setState({\r\n            dataGraph: this.state.dataGraph.concat([info]),\r\n            quantity: iCnt + 1,\r\n            valsY1: this.state.valsY1.concat([v1]),\r\n            valsY2: this.state.valsY2.concat([v2]),\r\n            dates: this.state.dates.concat([new Moment(info.datetime).format(\"hh:mm\")])\r\n          });\r\n          auxRangeT = new Moment(info.datetime).format(\"hh:mm\");\r\n          iCnt++;\r\n        });\r\n        this.getMaxMin();\r\n        // Verifies if is necessary or not to draw the graph.\r\n        if (this.state.stateResult === 200 && this.state.quantity > 0) {\r\n          this.setState({\r\n            rangeTime: this.state.rangeTime + auxRangeT\r\n          });\r\n          this.paintGraph();\r\n        } else {\r\n          this.setState({ quantity: 0 });\r\n        }\r\n      })\r\n      .catch((ex) => {\r\n        console.log(ex);\r\n      })\r\n  }\r\n\r\n  // Handle the value changes on the textboxes.\r\n  handleChange(sender, id) {\r\n    let toUpdate = this.state.dataGraph;  // Obtains the array with the current data.\r\n    let valueArr = [];  // Variable to get the array of the value to update it.\r\n    // Verify if the value to update is on the first or second array.\r\n    if (sender.target.name === 'val1') {\r\n      toUpdate[id].value1 = sender.target.value;\r\n      valueArr = this.state.valsY1;\r\n      valueArr[id] = { y: sender.target.value };\r\n      this.setState({valsY1: valueArr });\r\n    } else if (sender.target.name === 'val2') {\r\n      toUpdate[id].value2 = sender.target.value;\r\n      valueArr = this.state.valsY2;\r\n      valueArr[id] = { y: sender.target.value };\r\n      this.setState({valsY2: valueArr });\r\n    }\r\n    // Calls the function to get the maximum and minimum value.\r\n    this.getMaxMin();\r\n    // Does the request to update the value on the server.\r\n    fetch('http://localhost:8080/reading/', {\r\n      id: 'updateReading',\r\n      name: 'put',\r\n      request: JSON.stringify({\r\n        id: toUpdate[id].key,\r\n        timestamp: toUpdate[id].datetime,\r\n        value1: toUpdate[id].value1,\r\n        value2: toUpdate[id].value2\r\n      })\r\n    })\r\n    .then((result) => {\r\n      this.setState({\r\n        stateResult: result.status,\r\n        message: result.statusText,\r\n        dataGraph: toUpdate,\r\n        action: 'put'\r\n      });\r\n      this.paintGraph();\r\n    })\r\n  }\r\n\r\n  // Function that draws the graph.\r\n  paintGraph() {\r\n    //Get values from the \"state\".\r\n    let datosX = this.state.dataGraph.length;\r\n    let max = Number(this.state.maxValY) + 2;\r\n    max = (max < 0) ? 0 : max;  //\r\n    let min = Number(this.state.minValY) - 2;\r\n    min = (min > 0) ? 0 : min; //\r\n    let labelTime = '(' + this.state.rangeTime + ')';\r\n    let labetValues =  '(' + Math.round(min) + ' - ' + Math.round(max) + ')';\r\n    let dataset1 = this.state.valsY1;\r\n    let dataset2 = this.state.valsY2;\r\n    let dataset = [dataset1, dataset2];\r\n    let dtaDate = this.state.dates;\r\n\r\n    // Clear the previous content.\r\n    d3.select(\"g\").remove(\"g\");\r\n    // Vars.\r\n    let svg = d3.select(\"svg\"),\r\n      margin = {top: 50, left: 50, bottom: 50, right: 50},\r\n      width = +svg.attr(\"width\") - margin.left - margin.right,\r\n      height = +svg.attr(\"height\") - margin.top - margin.bottom;\r\n    // Scale of axis X.\r\n    // Set the range of the values to the axis X.\r\n    let xData = d3.scaleQuantize()\r\n      .domain([0, datosX-1])\r\n      .range(dtaDate);\r\n    // Set the scale of the range of values.\r\n    let xRange = d3.scalePoint()\r\n      .domain(xData.range())\r\n      .range([0, width]);\r\n    // Axis X.\r\n    let xScale = d3.scaleLinear()\r\n      .domain([0, datosX-1]) // input\r\n      .range([0, width]); // output\r\n    // Axis Y.\r\n    let yScale = d3.scaleLinear()\r\n      .domain([min, max]) // input\r\n      .range([height, 0]); // output\r\n    // Add the workspace.\r\n    let g = svg.append(\"g\")\r\n      .attr(\"transform\", \"translate(\" + margin.left + \", \" + margin.top + \")\");\r\n    // Add a label to the axis x.\r\n    g.append(\"text\")\r\n      .attr(\"class\", \"label\")\r\n      .attr(\"x\", width)\r\n      .attr(\"y\", svg.attr(\"height\") - 65)\r\n      .text(\"Time \" + labelTime);\r\n    // Add a label to the axis y.\r\n    g.append(\"text\")\r\n      .attr(\"class\", \"label\")\r\n      .attr(\"x\", 0)\r\n      .attr(\"y\", -25)\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .text(\"Values \" + labetValues);\r\n    // Add the axix x(range) to the bottom of the graph.\r\n    g.append(\"g\")\r\n      .attr(\"transform\", \"translate(0, \" + height + \")\")\r\n      .call(d3.axisBottom(xRange));\r\n    // Add the axis y to the workspace.\r\n    g.append(\"g\")\r\n      .call(d3.axisLeft(yScale));\r\n    // Add the axis x(quantity) to the workspace.\r\n    g.append(\"g\")\r\n      .attr(\"class\", \"axis-linear\")\r\n      .attr(\"transform\", \"translate(0, \" + yScale(0) + \")\")\r\n      .call(d3.axisBottom(xScale));\r\n    // Create the line object.\r\n    let line = d3.line()\r\n      .x((d, i) => { return xScale(i); })\r\n      .y((d) => { return yScale(d.y); })\r\n      .curve(d3.curveMonotoneX);\r\n    // Add the paths.\r\n    g.append(\"g\").selectAll(\"path\")\r\n      .data(dataset)\r\n    .enter().append(\"path\")\r\n      .attr(\"class\", \"line\")\r\n      .attr(\"stroke\", (d, i) => { return [\"#b73535\", \"#3546b7\"][i]; })\r\n      .attr(\"d\", line)//;\r\n    // Add circles to the data array 1.\r\n    g.append(\"g\").selectAll(\".dot\")\r\n      .data(dataset1)\r\n    .enter().append(\"circle\")\r\n      .attr(\"class\", \"dot1\")\r\n      .attr(\"cx\", (d, i) => { return xScale(i); })\r\n      .attr(\"cy\", (d) => { return yScale(d.y); })\r\n      .attr(\"r\", 3);\r\n    // Add circles to the data array 2.\r\n    g.append(\"g\").selectAll(\".dot\")\r\n      .data(dataset2)\r\n    .enter().append(\"circle\")\r\n      .attr(\"class\", \"dot2\")\r\n      .attr(\"cx\", (d, i) => { return xScale(i); })\r\n      .attr(\"cy\", (d) => { return yScale(d.y); })\r\n      .attr(\"r\", 3);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.stateResult === 200) {\r\n      if (this.state.quantity > 0) {\r\n        return (\r\n          <div>\r\n            <div>\r\n              <DateCbBx qty={this.state.old} value={this.state.old} onChange={(e) => this.handleSelected(e)} />\r\n            </div>\r\n            <div>\r\n              <svg width=\"960\" height=\"480\"></svg>\r\n            </div>\r\n            <div>\r\n              <table className=\"table-data\" name=\"data\" >\r\n                <tbody>\r\n                  <thead>\r\n                    <div className=\"rowH\">\r\n                      <tr>\r\n                        <th className=\"col1\">Date/Time</th>\r\n                        <th className=\"col2\">Value 1</th>\r\n                        <th className=\"col3\">Value 2</th>\r\n                      </tr>\r\n                    </div>\r\n                  </thead>\r\n                  <tbody>\r\n                    {\r\n                      this.state.dataGraph.map((fila) => {\r\n                        return (\r\n                          <RowData key={fila.key} data={fila} onChange={(e) => this.handleChange(e, fila.cnt)} />\r\n                        );\r\n                      })\r\n                    }\r\n                  </tbody>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        );\r\n      } else if(this.state.quantity === -1) {\r\n        return (\r\n          <div>\r\n            <p className=\"data-updating\">\r\n              Loading data...\r\n            </p>\r\n          </div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div>\r\n            <DateCbBx qty={this.state.old} value={this.state.old} onChange={(e) => this.handleSelected(e)} />\r\n            <p className=\"no-data-found\">\r\n              No data was obtained, please select another option.\r\n            </p>\r\n          </div>\r\n        );\r\n      }\r\n    } else if (this.state.stateResult === 500) {\r\n      return (\r\n        <div>\r\n          <p className=\"server-error\">\r\n            It was not possible to make the request, please try again.\r\n          </p>\r\n        </div>\r\n      );\r\n    } else if (this.state.stateResult === 400) {\r\n      if (this.state.action === 'get') {\r\n        return (\r\n          <div>\r\n            <p className=\"server-error\">\r\n              An error occurred when requesting the information, please verify the format of the date, it must be in ISO8601 format * without * time zone.\r\n            </p>\r\n          </div>\r\n        );\r\n      } else if (this.state.action === 'put') {\r\n        return (\r\n          <div>\r\n            <p className=\"server-error\">\r\n              The request made, could not be found. Please try again.\r\n            </p>\r\n          </div>\r\n        );\r\n      }\r\n    } else if (this.state.stateResult === 0) {\r\n      return (\r\n        <div>\r\n          <p className=\"data-updating\">\r\n            Loading data...\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <p className=\"server-error\">\r\n            It has not been possible to make the request to the server, code: {this.state.stateResult}.\r\n          <br />\r\n            The message returned by the server is: \"{this.state.message}\".\r\n          </p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n  <RestFAPI />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// ========================================\r\n"],"sourceRoot":""}